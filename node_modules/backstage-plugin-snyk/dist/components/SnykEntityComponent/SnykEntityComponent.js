import React from "react";
import { 
// Tabs,
Progress, Content, TabbedLayout, Link, } from "@backstage/core-components";
import { MissingAnnotationEmptyState } from "@backstage/plugin-catalog-react";
import { useApi } from "@backstage/core-plugin-api";
import { InfoCard, } from "@backstage/core-components";
import { snykApiRef } from "../../api";
import { useAsync } from "react-use";
import { Alert } from '@mui/material';
import * as utils from "../../utils/utils";
import { generateSnykTabForProject } from "./SnykTab";
import GitHubIcon from "@mui/icons-material/GitHub";
import { mdiConsole, mdiGitlab, mdiBitbucket, mdiMicrosoftAzureDevops, mdiLambda, } from "./svgs";
import { useEntity } from "@backstage/plugin-catalog-react";
import { SNYK_ANNOTATION_ORG, SNYK_ANNOTATION_ORGS, SNYK_ANNOTATION_TARGETID, SNYK_ANNOTATION_TARGETNAME, } from "../../config";
function svgComponent(componentSVG) {
    return (React.createElement("svg", { style: {
            width: 24,
            height: 24,
        }, viewBox: "0 0 24 24" },
        React.createElement("path", { fill: "currentColor", d: componentSVG })));
}
const getIconForProjectType = (projectOrigin) => {
    switch (projectOrigin) {
        case "github":
            return React.createElement(GitHubIcon, null);
        case "cli":
            return svgComponent(mdiConsole);
        case "gitlab":
            return svgComponent(mdiGitlab);
        case "bitbucket":
            return svgComponent(mdiBitbucket);
        case "azure-repos":
            return svgComponent(mdiMicrosoftAzureDevops);
        case "aws-lambda":
            return svgComponent(mdiLambda);
        default:
            return React.createElement(React.Fragment, null, " ");
    }
};
export const SnykEntityComponent = () => {
    var _a, _b, _c, _d;
    const { entity } = useEntity();
    const snykApi = useApi(snykApiRef);
    if (!entity || !(entity === null || entity === void 0 ? void 0 : entity.metadata.name)) {
        return React.createElement(React.Fragment, null, "No Snyk org/project-ids listed");
    }
    const containerStyle = { width: "60%", padding: "20px" };
    if (!snykApi.isAvailableInEntity(entity)) {
        const version = snykApi.getSnykApiVersion();
        return (React.createElement(Content, null,
            React.createElement("div", { style: containerStyle },
                React.createElement(MissingAnnotationEmptyState, { annotation: [SNYK_ANNOTATION_ORG, SNYK_ANNOTATION_TARGETNAME] })),
            "or alternatively using the target name or ID (you can retrieve using the",
            " ",
            React.createElement(Link, { to: `https://apidocs.snyk.io/?version=${version}%7Ebeta#get-/orgs/-org_id-/targets` }, "Targets endpoint)"),
            " ",
            "endpoint.",
            React.createElement("div", { style: containerStyle },
                React.createElement(MissingAnnotationEmptyState, { annotation: [SNYK_ANNOTATION_ORG, SNYK_ANNOTATION_TARGETID] })),
            "Other combinations are possible, please checkout the README."));
    }
    const tabs = [];
    const orgIds = ((_b = (_a = entity === null || entity === void 0 ? void 0 : entity.metadata.annotations) === null || _a === void 0 ? void 0 : _a[SNYK_ANNOTATION_ORGS]) === null || _b === void 0 ? void 0 : _b.split(','))
        || ((_d = (_c = entity === null || entity === void 0 ? void 0 : entity.metadata.annotations) === null || _c === void 0 ? void 0 : _c[SNYK_ANNOTATION_ORG]) === null || _d === void 0 ? void 0 : _d.split(','))
        || [];
    const hasMultipleOrgs = orgIds.length > 1;
    // eslint-disable-next-line react-hooks/rules-of-hooks
    const { value, loading, error } = useAsync(async () => {
        return Promise.all(orgIds.map(async (orgId) => {
            const projectList = (entity === null || entity === void 0 ? void 0 : entity.metadata.annotations) ? await snykApi.getCompleteProjectsListFromAnnotations(orgId, entity === null || entity === void 0 ? void 0 : entity.metadata.annotations, hasMultipleOrgs) : [];
            const orgSlug = await snykApi.getOrgSlug(orgId);
            return { projectList, orgSlug, orgId };
        }));
    });
    if (loading) {
        return (React.createElement(Content, null,
            React.createElement(Progress, null)));
    }
    else if (error) {
        // eslint-disable-next-line no-console
        console.log(error);
        return React.createElement(Alert, { severity: "error" }, error.message);
    }
    value === null || value === void 0 ? void 0 : value.forEach(({ orgId, orgSlug, projectList }) => {
        projectList.forEach((project) => {
            const name = `${utils.extractTargetShortname(project.attributes.name || "unknown")}`;
            tabs.push({
                name: name,
                slug: hasMultipleOrgs ? `${orgSlug}/${name}` : name,
                icon: getIconForProjectType(project.attributes.origin || ""),
                projectId: project.id,
                tabContent: generateSnykTabForProject(snykApi, orgId, orgSlug, project.id),
                type: project.attributes.type,
            });
        });
    });
    const infoCardTitle = `${tabs.length} Project${tabs.length > 1 ? "s" : ""}`;
    return (React.createElement(React.Fragment, null,
        React.createElement(InfoCard, { title: infoCardTitle, cardClassName: "infocardstyle" },
            React.createElement(TabbedLayout, null, tabs.map((tab) => (React.createElement(TabbedLayout.Route, { key: tab.projectId, path: tab.slug, title: `(${tab.type}-${tab.projectId.substring(0, 3)}) ${tab.name}` },
                React.createElement(Content, null,
                    React.createElement(tab.tabContent, null)))))))));
};
//# sourceMappingURL=SnykEntityComponent.js.map