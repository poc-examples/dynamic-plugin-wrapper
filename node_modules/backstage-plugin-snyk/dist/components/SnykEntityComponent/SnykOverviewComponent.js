import React from "react";
import { InfoCard, WarningPanel, Progress } from "@backstage/core-components";
import { useApi } from "@backstage/core-plugin-api";
import { snykApiRef } from "../../api";
import { useAsync } from "react-use";
import { Alert } from '@mui/material';
import { Grid } from "@mui/material";
import { SnykCounter } from "./components/SnykCountersComponent";
import { SnykCounterTable } from "./components/SnykCountersTableComponent";
import { useEntity } from "@backstage/plugin-catalog-react";
import { SNYK_ANNOTATION_ORG, SNYK_ANNOTATION_ORGS } from "../../config";
export const SnykOverviewComponent = ({ entity, children }) => {
    var _a, _b, _c, _d;
    const snykApi = useApi(snykApiRef);
    if (!entity || !(entity === null || entity === void 0 ? void 0 : entity.metadata.name)) {
        return React.createElement(React.Fragment, null, "No Snyk org/project-ids listed");
    }
    if (!snykApi.isAvailableInEntity(entity)) {
        return (React.createElement(Grid, { container: true, spacing: 2, justifyContent: "center", direction: "column", alignItems: "center" },
            React.createElement(Grid, { item: true },
                React.createElement(WarningPanel, { title: "Unable to find snyk project details", message: React.createElement(React.Fragment, null,
                        "Seems we are missing some references, check out the example annotations in",
                        " ",
                        React.createElement("a", { href: "https://github.com/aarlaud-playground/goof/blob/master/backstage-catalog-info.yaml" }, "backstage-catalog-info.yaml"),
                        ".") })),
            React.createElement(Grid, { item: true },
                React.createElement("img", { src: "https://i.gifer.com/yH.gif", alt: "" }))));
    }
    const orgIds = ((_b = (_a = entity === null || entity === void 0 ? void 0 : entity.metadata.annotations) === null || _a === void 0 ? void 0 : _a[SNYK_ANNOTATION_ORGS]) === null || _b === void 0 ? void 0 : _b.split(",")) ||
        ((_d = (_c = entity === null || entity === void 0 ? void 0 : entity.metadata.annotations) === null || _c === void 0 ? void 0 : _c[SNYK_ANNOTATION_ORG]) === null || _d === void 0 ? void 0 : _d.split(",")) ||
        [];
    const hasMultipleOrgs = orgIds.length > 1;
    // eslint-disable-next-line react-hooks/rules-of-hooks
    const { value, loading, error } = useAsync(async () => {
        const aggregatedIssuesCount = {
            critical: 0,
            high: 0,
            medium: 0,
            low: 0,
        };
        const projectOrgList = await Promise.all(orgIds.map(async (orgId) => {
            const projectList = (entity === null || entity === void 0 ? void 0 : entity.metadata.annotations)
                ? await snykApi.getCompleteProjectsListFromAnnotations(orgId, entity.metadata.annotations, hasMultipleOrgs)
                : [];
            return { projectList, orgId };
        }));
        let projectsCount = 0;
        const allProjects = projectOrgList.flatMap(({ projectList }) => projectList);
        const projectOrgMap = projectOrgList.reduce((acc, { orgId, projectList }) => {
            projectList.forEach((project) => {
                acc[project.id] = orgId;
            });
            return acc;
        }, {});
        const projectIds = allProjects.map((project) => project.id);
        for (let i = 0; i < projectIds.length; i++) {
            const projectId = projectIds[i];
            if (allProjects === null || allProjects === void 0 ? void 0 : allProjects.some((selectedProject) => selectedProject.id === projectId)) {
                projectsCount++;
                const vulnsIssues = await snykApi.listAllAggregatedIssues(projectOrgMap[projectId], projectId);
                const currentProjectIssuesCount = snykApi.getIssuesCount(vulnsIssues);
                aggregatedIssuesCount.critical += currentProjectIssuesCount.critical;
                aggregatedIssuesCount.high += currentProjectIssuesCount.high;
                aggregatedIssuesCount.medium += currentProjectIssuesCount.medium;
                aggregatedIssuesCount.low += currentProjectIssuesCount.low;
            }
        }
        return { aggregatedIssuesCount, projectsCount };
    });
    const issuesCount = (value === null || value === void 0 ? void 0 : value.aggregatedIssuesCount) || {
        critical: 0,
        high: 0,
        medium: 0,
        low: 0,
    };
    if (loading) {
        return (React.createElement(InfoCard, { title: "Snyk Issues" },
            React.createElement(Progress, null)));
    }
    else if (error) {
        return (React.createElement(InfoCard, { title: "Snyk - Failed to retrieve", deepLink: { title: "Error", link: "" } },
            React.createElement(Alert, { severity: "error" }, error === null || error === void 0 ? void 0 : error.message)));
    }
    const linkInfo = {
        title: `More details`,
        link: `snyk/`,
    };
    return (React.createElement(InfoCard, { title: "Snyk Issues", deepLink: linkInfo }, children(issuesCount)));
};
export const SnykOverview = () => {
    const { entity } = useEntity();
    return React.createElement(SnykOverviewComponent, { entity: entity }, function (data) {
        return React.createElement(SnykCounter, { issuesCount: data });
    });
};
export const SnykOverviewTable = () => {
    const { entity } = useEntity();
    return React.createElement(SnykOverviewComponent, { entity: entity }, function (data) {
        return React.createElement(SnykCounterTable, { issuesCount: data });
    });
};
//# sourceMappingURL=SnykOverviewComponent.js.map