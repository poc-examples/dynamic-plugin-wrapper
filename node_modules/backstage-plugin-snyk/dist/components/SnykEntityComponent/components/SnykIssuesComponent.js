import React from "react";
import { Table, Link } from "@backstage/core-components";
export const IssuesTable = ({ issues, pageUrl }) => {
    const columns = [
        { title: "Severity", field: "severity" },
        { title: "ID", field: "id" },
        { title: "Type", field: "type" },
        { title: "Status", field: "status" },
        { title: "Description", field: "description" },
        { title: "Score", field: "score" },
    ];
    const data = issues
        .map((issue) => {
        var _a, _b;
        const deepLinkToIssue = (React.createElement(Link, { to: `${pageUrl}#issue-${issue.attributes.key}` },
            issue.attributes.key.substring(0, 35),
            "..."));
        let strikeThrough = false;
        if (issue.attributes.status === "resolved") {
            strikeThrough = true;
        }
        const values = {
            severity: issue.attributes.effective_severity_level,
            severityRaw: issue.attributes.effective_severity_level,
            id: deepLinkToIssue,
            type: issue.attributes.type,
            status: issue.attributes.status,
            statusRaw: issue.attributes.status,
            description: issue.attributes.title,
            // either gets a priority score or a risk score
            score: ((_a = issue.attributes.priority) === null || _a === void 0 ? void 0 : _a.score) || ((_b = issue.attributes.risk) === null || _b === void 0 ? void 0 : _b.score.value) || "",
        };
        for (const key in values) {
            if (strikeThrough && key !== "statusRaw" && key !== "severityRaw") {
                values[key] = React.createElement("s", null, values[key]);
            }
        }
        return values;
    })
        .sort((a, b) => {
        const statusOrder = {
            open: 3,
            ignored: 2,
            resolved: 1,
        };
        const severity = {
            critical: 4,
            high: 3,
            medium: 2,
            low: 1,
        };
        if (a.statusRaw !== b.statusRaw) {
            return statusOrder[a.statusRaw] < statusOrder[b.statusRaw] ? 1 : -1;
        }
        if (a.severityRaw === b.severityRaw) {
            if (a.statusRaw === "resolved" && b.statusRaw === "resolved") {
                return severity[a.severityRaw] < severity[b.severityRaw] ? 1 : -1;
            }
            return a.score < b.score ? 1 : -1;
        }
        return severity[a.severityRaw] < severity[b.severityRaw] ? 1 : -1;
    });
    return (React.createElement(Table, { title: "Security vulnerabilities", options: {
            search: false,
            paging: true,
            pageSize: 20,
            paginationPosition: 'both',
            pageSizeOptions: [20, 50, 100]
        }, columns: columns, data: data }));
};
//# sourceMappingURL=SnykIssuesComponent.js.map