import React from "react";
import { StructuredMetadataTable, Progress, InfoCard, Content, TabbedCard, CardTab, } from "@backstage/core-components";
import { Grid } from "@material-ui/core";
import { useAsync } from "react-use";
import { Alert } from "@material-ui/lab";
import { IssuesTable } from "./components/SnykIssuesComponent";
import { DepGraphInfo } from "./components/SnykDepGraphComponent";
import { SnykCounter } from "./components/SnykCountersComponent";
import { IssueAttributesStatusEnum, TypeDef, } from "../../types/unifiedIssuesTypes";
export const generateSnykTabForProject = (snykApi, orgId, orgSlug, projectId) => {
    const genericIssuesTypeArray = Object.values(TypeDef).filter((type) => type !== "license");
    return ({}) => {
        const { value, loading, error } = useAsync(async () => {
            const allIssues = await snykApi.listAllAggregatedIssues(orgId, projectId);
            const genericIssues = allIssues.filter((issue) => genericIssuesTypeArray.includes(issue.attributes.type));
            const licenseIssues = allIssues.filter((issue) => issue.attributes.type === "license");
            const ignoredIssues = allIssues.filter((issue) => issue.attributes.ignored === true &&
                issue.attributes.status != IssueAttributesStatusEnum.Resolved);
            const depGraph = genericIssues.some((issue) => issue.attributes.type === TypeDef.PackageVulnerability)
                ? await snykApi.getDependencyGraph(orgId, projectId)
                : null;
            const projectDetails = await snykApi.getProjectDetails(orgId, projectId);
            return {
                genericIssues,
                licenseIssues,
                ignoredIssues,
                depGraph,
                projectDetails,
            };
        });
        if (loading) {
            return (React.createElement(Content, null,
                React.createElement(Progress, null)));
        }
        else if (error) {
            // eslint-disable-next-line no-console
            console.log(error);
            return React.createElement(Alert, { severity: "error" }, error.message);
        }
        else if (!value) {
            return React.createElement(Alert, { severity: "error" }, "Empty response");
        }
        const issuesCount = snykApi.getIssuesCount(value.genericIssues);
        const licenseIssuesCount = snykApi.getIssuesCount(value.licenseIssues);
        const ignoredIssuesCount = snykApi.getIgnoredIssuesCount(value.ignoredIssues);
        const metadata = {
            origin: value.projectDetails.origin,
            type: value.projectDetails.type,
            created: value.projectDetails.created,
            "last tested": value.projectDetails.lastTestedDate,
            "Project ID": `${value.projectDetails.id}`,
            Organization: `${orgSlug} (${orgId})`,
        };
        const linkInfo = {
            title: "More details",
            link: `https://${snykApi.getSnykAppHost()}/org/${orgSlug}/project/${projectId}`,
        };
        if (value.depGraph) {
            return (React.createElement(React.Fragment, null,
                React.createElement(Grid, { container: true, spacing: 2 },
                    React.createElement(Grid, { item: true, xs: 12 },
                        React.createElement(Grid, { container: true, spacing: 2, justifyContent: "space-between", direction: "row" },
                            React.createElement(Grid, { item: true, xs: 12 },
                                React.createElement(InfoCard, { title: value.projectDetails.name },
                                    React.createElement(StructuredMetadataTable, { metadata: metadata })))),
                        React.createElement(Grid, { container: true, spacing: 2, justifyContent: "space-between", direction: "row" },
                            React.createElement(Grid, { item: true, xs: 4 },
                                React.createElement(InfoCard, { title: "Vulnerabilities" },
                                    React.createElement(SnykCounter, { issuesCount: issuesCount }))),
                            React.createElement(Grid, { item: true, xs: 4 },
                                React.createElement(InfoCard, { title: "License Issues" },
                                    React.createElement(SnykCounter, { issuesCount: licenseIssuesCount }))),
                            React.createElement(Grid, { item: true, xs: 4 },
                                React.createElement(InfoCard, { title: "Ignored Issues" },
                                    React.createElement(SnykCounter, { issuesCount: ignoredIssuesCount })))),
                        React.createElement(Grid, { container: true, spacing: 2, justifyContent: "space-between", direction: "row" },
                            React.createElement(Grid, { item: true, xs: 12 },
                                React.createElement(TabbedCard, { deepLink: linkInfo },
                                    React.createElement(CardTab, { label: "Issues" },
                                        React.createElement(IssuesTable, { issues: value.genericIssues, pageUrl: linkInfo.link })),
                                    React.createElement(CardTab, { label: "License Issues" },
                                        React.createElement(IssuesTable, { issues: value.licenseIssues, pageUrl: linkInfo.link })),
                                    React.createElement(CardTab, { label: "Dependencies" },
                                        React.createElement(Grid, { container: true },
                                            React.createElement(DepGraphInfo, { depGraph: value.depGraph }))),
                                    React.createElement(CardTab, { label: "Ignored" },
                                        React.createElement(IssuesTable, { issues: value.ignoredIssues, pageUrl: linkInfo.link })))))))));
        }
        return (React.createElement(React.Fragment, null,
            React.createElement(Grid, { container: true, spacing: 2 },
                React.createElement(Grid, { item: true, xs: 12 },
                    React.createElement(Grid, { container: true, spacing: 2, justifyContent: "space-between", direction: "row" },
                        React.createElement(Grid, { item: true, xs: 12 },
                            React.createElement(InfoCard, { title: value.projectDetails.name },
                                React.createElement(StructuredMetadataTable, { metadata: metadata })))),
                    React.createElement(Grid, { container: true, spacing: 2, justifyContent: "space-between", direction: "row" },
                        React.createElement(Grid, { item: true, xs: 4 },
                            React.createElement(InfoCard, { title: "Vulnerabilities" },
                                React.createElement(SnykCounter, { issuesCount: issuesCount }))),
                        React.createElement(Grid, { item: true, xs: 4 },
                            React.createElement(InfoCard, { title: "License Issues" },
                                React.createElement(SnykCounter, { issuesCount: licenseIssuesCount }))),
                        React.createElement(Grid, { item: true, xs: 4 },
                            React.createElement(InfoCard, { title: "Ignored Issues" },
                                React.createElement(SnykCounter, { issuesCount: ignoredIssuesCount })))),
                    React.createElement(Grid, { container: true, spacing: 2, justifyContent: "space-between", direction: "row" },
                        React.createElement(Grid, { item: true, xs: 12 },
                            React.createElement(TabbedCard, { deepLink: linkInfo },
                                React.createElement(CardTab, { label: "Issues" },
                                    React.createElement(IssuesTable, { issues: value.genericIssues, pageUrl: linkInfo.link })),
                                React.createElement(CardTab, { label: "License Issues" },
                                    React.createElement(IssuesTable, { issues: value.licenseIssues, pageUrl: linkInfo.link })),
                                React.createElement(CardTab, { label: "Ignored" },
                                    React.createElement(IssuesTable, { issues: value.ignoredIssues, pageUrl: linkInfo.link })))))))));
    };
};
//# sourceMappingURL=SnykTab.js.map