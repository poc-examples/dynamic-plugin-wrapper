import { ApiRef, ConfigApi, DiscoveryApi, FetchApi } from "@backstage/core-plugin-api";
import { ProjectsData } from "../types/projectsTypes";
import { Entity } from "@backstage/catalog-model";
import { IssuesCount } from "../types/types";
import { Issue, UnifiedIssues } from "../types/unifiedIssuesTypes";
type Options = {
    discoveryApi: DiscoveryApi;
    /**
     * Path to use for requests via the proxy, defaults to ''
     */
    proxyPathBase?: string;
    configApi: ConfigApi;
    fetchApi: FetchApi;
};
export declare const snykApiRef: ApiRef<SnykApi>;
export interface SnykApi {
    listAllAggregatedIssues(orgName: string, projectId: string): Promise<UnifiedIssues>;
    getProjectDetails(orgName: string, projectId: string): Promise<any>;
    getCompleteProjectsListFromAnnotations(orgId: string, annotations: Record<string, string>, ignoreMissingTargets: boolean): Promise<ProjectsData[]>;
    getDependencyGraph(orgName: string, projectId: string): Promise<any>;
    getSnykAppHost(): string;
    getSnykApiVersion(): string;
    getSnykIssuesApiVersion(): string;
    getOrgSlug(orgId: string): Promise<string>;
    isMocked(): boolean;
    isAvailableInEntity(entity: Entity): boolean;
    isShowResolvedInGraphs(entity: Entity): boolean;
    getIssuesCount(issues: Array<Issue>): IssuesCount;
    getIgnoredIssuesCount(issues: Array<Issue>): IssuesCount;
}
export declare class SnykApiClient implements SnykApi {
    private readonly discoveryApi;
    private readonly proxyPathBase;
    private readonly configApi;
    private readonly fetchApi;
    private headers;
    constructor(options: Options);
    private getApiUrl;
    private fetch;
    getSnykAppHost(): string;
    isMocked(): boolean;
    isShowResolvedInGraphs(): boolean;
    getSnykApiVersion(): string;
    getSnykIssuesApiVersion(): string;
    isAvailableInEntity(entity: Entity): boolean;
    getIssuesCount: (issues: Array<Issue>) => IssuesCount;
    getIgnoredIssuesCount: (issues: Array<Issue>) => IssuesCount;
    listAllAggregatedIssues(orgId: string, projectId: string): Promise<UnifiedIssues>;
    getProjectDetails(orgName: string, projectId: string): Promise<any>;
    getOrgSlug(orgId: string): Promise<string>;
    getCompleteProjectsListFromAnnotations(orgId: string, annotations: Record<string, string>, ignoreMissingTargets?: boolean): Promise<ProjectsData[]>;
    getProjectsListByTargets(orgId: string, repoName: string[], ignoreMissing?: boolean): Promise<ProjectsData[]>;
    getProjectsListByProjectIds(orgId: string, projectIdsArray: string[]): Promise<ProjectsData[]>;
    private getTargetId;
    getDependencyGraph(orgName: string, projectId: string): Promise<any>;
}
export {};
//# sourceMappingURL=SnykApiClient.d.ts.map