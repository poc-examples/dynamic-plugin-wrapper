'use strict';

var commonjs = require('@rollup/plugin-commonjs');
var json = require('@rollup/plugin-json');
var resolve = require('@rollup/plugin-node-resolve');
var yaml = require('@rollup/plugin-yaml');
var svgr = require('@svgr/rollup');
var chalk = require('chalk');
var fs = require('fs-extra');
var dts = require('rollup-plugin-dts');
var esbuild = require('rollup-plugin-esbuild');
var postcss = require('rollup-plugin-postcss');
var path = require('path');
var entryPoints = require('../entryPoints.cjs.js');
var paths = require('../paths.cjs.js');
var svgrTemplate = require('../svgrTemplate.cjs.js');
var plugins = require('./plugins.cjs.js');
var types = require('./types.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var commonjs__default = /*#__PURE__*/_interopDefaultCompat(commonjs);
var json__default = /*#__PURE__*/_interopDefaultCompat(json);
var resolve__default = /*#__PURE__*/_interopDefaultCompat(resolve);
var yaml__default = /*#__PURE__*/_interopDefaultCompat(yaml);
var svgr__default = /*#__PURE__*/_interopDefaultCompat(svgr);
var chalk__default = /*#__PURE__*/_interopDefaultCompat(chalk);
var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);
var dts__default = /*#__PURE__*/_interopDefaultCompat(dts);
var esbuild__default = /*#__PURE__*/_interopDefaultCompat(esbuild);
var postcss__default = /*#__PURE__*/_interopDefaultCompat(postcss);

const SCRIPT_EXTS = [".js", ".jsx", ".ts", ".tsx"];
function isFileImport(source) {
  if (source.startsWith(".")) {
    return true;
  }
  if (source.startsWith("/")) {
    return true;
  }
  if (source.match(/[a-z]:/i)) {
    return true;
  }
  return false;
}
async function makeRollupConfigs(options) {
  const configs = new Array();
  const targetDir = options.targetDir ?? paths.paths.targetDir;
  let targetPkg = options.packageJson;
  if (!targetPkg) {
    const packagePath = path.resolve(targetDir, "package.json");
    targetPkg = await fs__default.default.readJson(packagePath);
  }
  const onwarn = ({ code, message }) => {
    if (code === "EMPTY_BUNDLE") {
      return;
    }
    if (options.logPrefix) {
      console.log(options.logPrefix + message);
    } else {
      console.log(message);
    }
  };
  const distDir = path.resolve(targetDir, "dist");
  const entryPoints$1 = entryPoints.readEntryPoints(targetPkg);
  const scriptEntryPoints = entryPoints$1.filter(
    (e) => SCRIPT_EXTS.includes(e.ext)
  );
  if (options.outputs.has(types.Output.cjs) || options.outputs.has(types.Output.esm)) {
    const output = new Array();
    const mainFields = ["module", "main"];
    if (options.outputs.has(types.Output.cjs)) {
      output.push({
        dir: distDir,
        entryFileNames: `[name].cjs.js`,
        chunkFileNames: `cjs/[name]-[hash].cjs.js`,
        format: "commonjs",
        sourcemap: true,
        exports: "named"
      });
    }
    if (options.outputs.has(types.Output.esm)) {
      output.push({
        dir: distDir,
        entryFileNames: `[name].esm.js`,
        chunkFileNames: `esm/[name]-[hash].esm.js`,
        format: "module",
        sourcemap: true
      });
      mainFields.unshift("browser");
    }
    configs.push({
      input: Object.fromEntries(
        scriptEntryPoints.map((e) => [e.name, path.resolve(targetDir, e.path)])
      ),
      output,
      onwarn,
      preserveEntrySignatures: "strict",
      // All module imports are always marked as external
      external: (source, importer, isResolved) => Boolean(importer && !isResolved && !isFileImport(source)),
      plugins: [
        resolve__default.default({ mainFields }),
        commonjs__default.default({
          include: /node_modules/,
          exclude: [/\/[^/]+\.(?:stories|test)\.[^/]+$/]
        }),
        postcss__default.default(),
        plugins.forwardFileImports({
          exclude: /\.icon\.svg$/,
          include: [
            /\.svg$/,
            /\.png$/,
            /\.gif$/,
            /\.jpg$/,
            /\.jpeg$/,
            /\.eot$/,
            /\.woff$/,
            /\.woff2$/,
            /\.ttf$/,
            /\.md$/
          ]
        }),
        json__default.default(),
        yaml__default.default(),
        svgr__default.default({
          include: /\.icon\.svg$/,
          template: svgrTemplate.svgrTemplate
        }),
        esbuild__default.default({
          target: "es2019",
          minify: options.minify
        })
      ]
    });
  }
  if (options.outputs.has(types.Output.types) && !options.useApiExtractor) {
    const input = Object.fromEntries(
      scriptEntryPoints.map((e) => [
        e.name,
        paths.paths.resolveTargetRoot(
          "dist-types",
          path.relative(paths.paths.targetRoot, targetDir),
          e.path.replace(/\.(?:ts|tsx)$/, ".d.ts")
        )
      ])
    );
    for (const path$1 of Object.values(input)) {
      const declarationsExist = await fs__default.default.pathExists(path$1);
      if (!declarationsExist) {
        const declarationPath = path.relative(targetDir, path$1);
        throw new Error(
          `No declaration files found at ${declarationPath}, be sure to run ${chalk__default.default.bgRed.white(
            "yarn tsc"
          )} to generate .d.ts files before packaging`
        );
      }
    }
    configs.push({
      input,
      output: {
        dir: distDir,
        entryFileNames: `[name].d.ts`,
        chunkFileNames: `types/[name]-[hash].d.ts`,
        format: "es"
      },
      external: [
        /\.css$/,
        /\.scss$/,
        /\.sass$/,
        /\.svg$/,
        /\.eot$/,
        /\.woff$/,
        /\.woff2$/,
        /\.ttf$/
      ],
      onwarn,
      plugins: [dts__default.default()]
    });
  }
  return configs;
}

exports.makeRollupConfigs = makeRollupConfigs;
//# sourceMappingURL=config.cjs.js.map
