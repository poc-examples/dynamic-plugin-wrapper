'use strict';

var fs = require('fs-extra');
var rollupPluginutils = require('rollup-pluginutils');
var path = require('path');
var dependencies = require('../../commands/install/steps/dependencies.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);
var path__default = /*#__PURE__*/_interopDefaultCompat(path);

function embedModules(options) {
  const filter = rollupPluginutils.createFilter(options.filter.include, options.filter.exclude, {
    resolve: false
  });
  const embedded = /* @__PURE__ */ new Set();
  return {
    name: "embed-modules",
    async buildEnd(err) {
      if (err !== void 0) {
        return;
      }
      for (const e of embedded) {
        const mod = await this.resolve(
          path__default.default.join(e, "package.json"),
          void 0,
          { skipSelf: true }
        );
        if (mod === null) {
          continue;
        }
        const pkgContent = await fs__default.default.readFile(mod.id, "utf8");
        const pkg = JSON.parse(pkgContent);
        if (dependencies.dependencies === void 0) {
          continue;
        }
        for (const dep in pkg.dependencies) {
          if (!Object.prototype.hasOwnProperty.call(pkg.dependencies, dep)) {
            continue;
          }
          options.addDependency(e, dep, pkg.dependencies[dep]);
        }
      }
    },
    options(inputOptions) {
      const origExternal = inputOptions.external;
      const external = (id, importer, isResolved) => {
        const importedId = id.replace(/\/alpha$/, "");
        if (filter(importedId) && importer !== void 0) {
          if (!embedded.has(importedId)) {
            embedded.add(importedId);
            console.log(`Embedding module ${importedId}`);
          }
          return false;
        }
        if (typeof origExternal === "function") {
          return origExternal(id, importer, isResolved);
        }
        if (Array.isArray(origExternal)) {
          return origExternal.includes(id);
        }
        return true;
      };
      return { ...inputOptions, external };
    }
  };
}

exports.embedModules = embedModules;
//# sourceMappingURL=embedPlugin.cjs.js.map
