'use strict';

var cliNode = require('@backstage/cli-node');
var chalk = require('chalk');
var fs = require('fs-extra');
var path = require('path');
var paths = require('../../lib/paths.cjs.js');
var collect = require('../../lib/schema/collect.cjs.js');
var tasks = require('../../lib/tasks.cjs.js');
var backendEmbedAsCode = require('./backend-embed-as-code.cjs.js');
var backendEmbedAsDependencies = require('./backend-embed-as-dependencies.cjs.js');
var dev = require('./dev.cjs.js');
var frontend = require('./frontend.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var chalk__default = /*#__PURE__*/_interopDefaultCompat(chalk);
var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);
var path__default = /*#__PURE__*/_interopDefaultCompat(path);

const saveSchema = async (packageName, destination) => {
  const configSchema = await collect.getConfigSchema(packageName);
  await fs__default.default.writeJson(paths.paths.resolveTarget(destination), configSchema, {
    encoding: "utf8",
    spaces: 2
  });
};
async function command(opts) {
  const rawPkg = await fs__default.default.readJson(paths.paths.resolveTarget("package.json"));
  const role = cliNode.PackageRoles.getRoleFromPackage(rawPkg);
  if (!role) {
    throw new Error(`Target package must have 'backstage.role' set`);
  }
  let targetPath;
  const roleInfo = cliNode.PackageRoles.getRoleInfo(role);
  let configSchemaPath;
  if (role === "backend-plugin" || role === "backend-plugin-module") {
    if (opts.embedAsDependencies) {
      targetPath = await backendEmbedAsDependencies.backend(opts);
    } else {
      targetPath = await backendEmbedAsCode.backend(roleInfo, opts);
    }
    configSchemaPath = path__default.default.join(targetPath, "dist/configSchema.json");
  } else if (role === "frontend-plugin" || role === "frontend-plugin-module") {
    targetPath = await frontend.frontend(roleInfo, opts);
    configSchemaPath = path__default.default.join(targetPath, "dist-scalprum/configSchema.json");
  } else {
    throw new Error(
      'Only packages with the "backend-plugin", "backend-plugin-module" or "frontend-plugin" roles can be exported as dynamic backend plugins'
    );
  }
  tasks.Task.log(
    `Saving self-contained config schema in ${chalk__default.default.cyan(configSchemaPath)}`
  );
  await saveSchema(rawPkg.name, configSchemaPath);
  await dev.applyDevOptions(opts, rawPkg.name, roleInfo, targetPath);
}

exports.command = command;
//# sourceMappingURL=command.cjs.js.map
